generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workflows Workflow[]

  @@map("users")
}

model Workflow {
  id         String   @id @default(cuid())
  name       String
  definition Json
  schedule   String?
  timezone   String?  @default("Europe/Paris")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  runs Run[]

  @@map("workflows")
}

model Run {
  id          String      @id @default(cuid())
  workflowId  String
  status      RunStatus   @default(QUEUED)
  startedAt   DateTime    @default(now())
  finishedAt  DateTime?
  startedBy   String?
  aiCredits   Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  workflow Workflow   @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  steps    RunStep[]

  @@map("runs")
}

model RunStep {
  id           String     @id @default(cuid())
  runId        String
  parentStepId String?
  index        Int
  name         String
  type         String
  status       StepStatus @default(PENDING)
  input        Json
  output       Json?
  aiCredits    Int        @default(0)
  startedAt    DateTime?
  finishedAt   DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  run        Run       @relation(fields: [runId], references: [id], onDelete: Cascade)
  parentStep RunStep?  @relation("StepHierarchy", fields: [parentStepId], references: [id])
  childSteps RunStep[] @relation("StepHierarchy")

  @@map("run_steps")
}

enum RunStatus {
  QUEUED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum StepStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  SKIPPED
}
